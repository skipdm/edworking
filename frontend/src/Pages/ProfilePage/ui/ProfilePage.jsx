import React, { useEffect, useState } from 'react';
import {
  Container, Typography, TextField, Button, Box, Paper, Avatar, IconButton
} from '@mui/material';
import SettingsIcon from '@mui/icons-material/Settings';
import WorkIcon from '@mui/icons-material/Work';
import NotesIcon from '@mui/icons-material/Notes';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import { useNavigate } from 'react-router-dom';

function ProfilePage() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [newPost, setNewPost] = useState('');
  const [newType, setNewType] = useState('–ø–æ—Å—Ç');
  const navigate = useNavigate();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const response = await fetch('http://localhost:8000/api/get_profile', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
        }
        const data = await response.json();
        setUser(data);  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
      }
    };

    fetchProfile();
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
  useEffect(() => {
    if (!user) return;
    const fetchPosts = async () => {
      try {
        const response = await fetch(`http://localhost:8000/api_post/user/me`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã');
        }
        const data = await response.json();
        setPosts(data);  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', err);
      }
    };

    fetchPosts();
  }, [user]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
  const handlePost = async () => {
    if (!newPost.trim() || !user) return;
    const newEntry = {
      content: newPost,
    };

    try {
      const response = await fetch('http://localhost:8000/api_post/create_post', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify(newEntry),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
      }

      const createdPost = await response.json();
      setPosts([createdPost, ...posts]);
      setNewPost('');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', err);
    }
  };

  const renderTypeIcon = (type) =>
    type === '—Ä–∞–±–æ—Ç–∞' ? <WorkIcon fontSize="small" /> : <NotesIcon fontSize="small" />;

  if (!user) return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</Typography>;

  const jobPosts = posts.filter(p => p.type === '—Ä–∞–±–æ—Ç–∞');
  const regularPosts = posts.filter(p => p.type === '–ø–æ—Å—Ç');

  return (
    <Container sx={{ mt: 4, fontFamily: 'Rubik, sans-serif' }}>
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Typography variant="h4">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</Typography>
        <IconButton onClick={() => navigate('/profile/settings')}>
          <SettingsIcon />
        </IconButton>
      </Box>

      <Paper sx={{ p: 3, my: 3 }}>
        <Box display="flex" flexDirection={{ xs: 'column', sm: 'row' }} gap={2} alignItems="center">
          <Box>
            <Typography variant="h5">{user.name}</Typography>
            <Typography variant="body2" color="text.secondary">{user.email}</Typography>
            {user.tg_id && <Typography mt={1}>{user.tg_id}</Typography>}
            {user.birth_date && <Typography mt={1}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {new Date(user.birth_date).toLocaleDateString()}</Typography>}
            {user.city && <Typography>–ì–æ—Ä–æ–¥: {user.city}</Typography>}
            {user.about && <Typography>About: {user.about}</Typography>}
          </Box>
        </Box>
      </Paper>

      <Paper sx={{ p: 2, mb: 3 }}>
        <TextField
          label="–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?"
          multiline
          rows={3}
          fullWidth
          value={newPost}
          onChange={(e) => setNewPost(e.target.value)}
        />
        <Box
          mt={1}
          display="flex"
          gap={1}
          flexDirection={{ xs: 'column', sm: 'row' }}
          flexWrap="wrap"
          justifyContent="space-between"
        >
          <Button
            onClick={() => setNewType('–ø–æ—Å—Ç')}
            variant={newType === '–ø–æ—Å—Ç' ? 'contained' : 'outlined'}
            startIcon={<NotesIcon />}
            fullWidth
          >
            –ü–æ—Å—Ç
          </Button>
          <Button
            onClick={handlePost}
            variant="contained"
            fullWidth
          >
            –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
          </Button>
        </Box>
      </Paper>

      {jobPosts.length > 0 && (
        <>
          <Typography variant="h6" sx={{ mt: 2, mb: 1 }}>üíº –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã / –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</Typography>
          {jobPosts.map((post) => (
            <Paper key={post.id} sx={{ p: 2, mb: 2 }}>
              <Box display="flex" gap={1} alignItems="center" mb={1}>
                {renderTypeIcon(post.type)}
                <Typography variant="subtitle1" fontWeight="bold">{post.author}</Typography>
              </Box>
              <Typography>{post.content}</Typography>
              <Box display="flex" alignItems="center" gap={1} mt={1}>
                <AccessTimeIcon fontSize="small" />
                <Typography variant="caption">
                  {new Date(post.timestamp).toLocaleString()}
                </Typography>
              </Box>
            </Paper>
          ))}
        </>
      )}

      {regularPosts.length > 0 && (
        <>
          <Typography variant="h6" sx={{ mt: 3, mb: 1 }}>üìù –û–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã</Typography>
          {regularPosts.map((post) => (
            <Paper key={post.id} sx={{ p: 2, mb: 2 }}>
              <Box display="flex" gap={1} alignItems="center" mb={1}>
                {renderTypeIcon(post.type)}
                <Typography variant="subtitle1" fontWeight="bold">{post.author}</Typography>
              </Box>
              <Typography>{post.content}</Typography>
              <Box display="flex" alignItems="center" gap={1} mt={1}>
                <AccessTimeIcon fontSize="small" />
                <Typography variant="caption">
                  {new Date(post.timestamp).toLocaleString()}
                </Typography>
              </Box>
            </Paper>
          ))}
        </>
      )}
    </Container>
  );
}

export default ProfilePage;
